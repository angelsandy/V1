struct Light
{
	float3 direction;
	float specularPower;
	float4 ambient;
	float4 diffuse;
};

cbuffer ConstantBufferPS
{
	Light light;
};

struct VS_OUTPUT
{
	float4 Pos : SV_POSITION;
	float2 TexCoord : TEXTURE;
	float3 normal : NORMAL;
	float3 viewDirection : COORDS;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float4 vectPos : POSITION;
	float maxHeight : HEIGHT;
};

Texture2D ObjTexture;
Texture2D ObjTexture2;
Texture2D ObjTexture3;
SamplerState ObjSamplerState;

float4 PS( VS_OUTPUT input ) : SV_Target
{
	input.normal = normalize(input.normal);

	float4 textureColor = ObjTexture.Sample( ObjSamplerState, input.TexCoord );
	float4 textureColor2 = ObjTexture2.Sample( ObjSamplerState, input.TexCoord );
	float4 textureColor3 = ObjTexture3.Sample( ObjSamplerState, input.TexCoord );

	float length = input.vectPos.y/input.maxHeight;
	textureColor *= length;
	textureColor2 *= (0.6-length); 
	//textureColor3 *= (0.33+(length/3));

	textureColor += textureColor2;

	float3 finalColor = textureColor;
	//finalColor += saturate(dot(light.direction, input.normal) * textureColor);


	return float4(finalColor, 1);
}